---
published: true
layout:     post
title:      "gulp-notes-2"
categories:
---
<h3>1. 构建项目目录结构（Directory Structure Build）</h3>
<div class="highlight highlight-source-js">
<pre><span class="pl-k">+</span> my<span class="pl-k">-</span>gulp（项目文件夹）
  <span class="pl-k">+</span> node_modules Gulp组件目录
  <span class="pl-k">+</span> dist 发布环境
  <span class="pl-k">+</span> css 编译后的<span class="pl-c1">CSS</span>文件
    ─ etc<span class="pl-k">...</span>
  <span class="pl-k">+</span> images 压缩后的图片文件
    ─ etc<span class="pl-k">...</span>
  <span class="pl-k">+</span> js 编译后的<span class="pl-c1">JS</span>文件
    ─ etc<span class="pl-k">...</span>
　　─ html 静态文件
  <span class="pl-k">+</span> src 开发环境
  <span class="pl-k">+</span> sass <span class="pl-c1">SASS</span>文件
    ─ etc<span class="pl-k">...</span>
  <span class="pl-k">+</span> images 图片文件
    ─ etc<span class="pl-k">...</span>
  <span class="pl-k">+</span> js <span class="pl-c1">JS</span>文件
    ─ etc<span class="pl-k">...</span>
  ─ html 静态文件
  ─ <span class="pl-smi">gulpfile</span>.<span class="pl-smi">js</span> Gulp任务文件

注：
<span class="pl-k">+</span> 表示目录  ─ 表示文件</pre>
</div>
<h3><a id="user-content-2-插件介绍及使用方法tasks-and-dependencies" class="anchor" href="https://github.com/zhonglimh/Gulp/blob/master/Example2/README.md#2-插件介绍及使用方法tasks-and-dependencies"></a>2. 插件介绍及使用方法（Tasks and dependencies）</h3>
<h4><a id="user-content-21-html处理html-task" class="anchor" href="https://github.com/zhonglimh/Gulp/blob/master/Example2/README.md#21-html处理html-task"></a>2.1 HTML处理（HTML Task）</h4>
<p>仅把开发环境中的HTML文件，移动至发布环境。</p>
<p>基础配置：</p>
<div class="highlight highlight-source-js">
<pre><span class="pl-smi">gulp</span>.<span class="pl-en">task</span>(<span class="pl-s"><span class="pl-pds">'</span>html<span class="pl-pds">'</span></span>, <span class="pl-k">function</span>() {
  <span class="pl-k">return</span> <span class="pl-smi">gulp</span>.<span class="pl-en">src</span>(<span class="pl-s"><span class="pl-pds">'</span>src/**/*.html<span class="pl-pds">'</span></span>) <span class="pl-c">// 指明源文件路径、并进行文件匹配</span>
    .<span class="pl-en">pipe</span>(<span class="pl-s"><span class="pl-pds">'</span>dist<span class="pl-pds">'</span></span>); <span class="pl-c">// 输出路径</span>
});</pre>
</div>
<p>执行命令： <code>gulp html</code></p>
<h4><a id="user-content-22-样式处理css-task" class="anchor" href="https://github.com/zhonglimh/Gulp/blob/master/Example2/README.md#22-样式处理css-task"></a>2.2 样式处理（CSS Task）</h4>
<h5><a id="user-content-css预处理sass编译-gulp-ruby-sass-" class="anchor" href="https://github.com/zhonglimh/Gulp/blob/master/Example2/README.md#css预处理sass编译-gulp-ruby-sass-"></a>CSS预处理/Sass编译 (<a href="https://www.npmjs.com/package/gulp-ruby-sass">gulp-ruby-sass</a>) ：</h5>
<p>相比较glup-sass而言，速度会稍许慢点，但功能更多并且稳定。</p>
<p>安装SASS： 1. 像Gulp基于Node.js一样，Sass基于Ruby环境，所以先去官网下载并安装<a href="http://rubyinstaller.org/downloads">Ruby</a>（在安装的时候，请勾选<code>Add Ruby executables to your PATH</code>这个选项，添加环境变量，不然以后使用编译软件的时候会提示找不到ruby环境）。 2. 安装完ruby之后，在开始菜单中，找到刚才安装的ruby，打开<code>Start Command Prompt with Ruby</code> 3. 然后直接在命令行中输入<code>gem install sass</code>按回车键确认，等待一段时间就会提示sass安装成功。</p>
<blockquote><p>注： 如果被墙，使用淘宝的Ruby镜像。具体操作方法请参考<a href="http://www.w3cplus.com/sassguide/install.html">淘宝RubyGems镜像安装 sass</a>。</p></blockquote>
<p>安装命令： <code>npm install gulp-ruby-sass --save-dev</code></p>
<p>基础配置：</p>
<div class="highlight highlight-source-js">
<pre><span class="pl-k">var</span> gulp <span class="pl-k">=</span> <span class="pl-c1">require</span>(<span class="pl-s"><span class="pl-pds">'</span>gulp<span class="pl-pds">'</span></span>); <span class="pl-c">// 基础库</span>
<span class="pl-k">var</span> sass <span class="pl-k">=</span> <span class="pl-c1">require</span>(<span class="pl-s"><span class="pl-pds">'</span>gulp-ruby-sass<span class="pl-pds">'</span></span>); <span class="pl-c">// sass/scss编译</span>

<span class="pl-smi">gulp</span>.<span class="pl-en">task</span>(<span class="pl-s"><span class="pl-pds">'</span>sass<span class="pl-pds">'</span></span>, <span class="pl-k">function</span> () {
     <span class="pl-k">return</span> <span class="pl-en">sass</span>(<span class="pl-s"><span class="pl-pds">'</span>src/css<span class="pl-pds">'</span></span>, { style<span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">'</span>compressed<span class="pl-pds">'</span></span> }) <span class="pl-c">// 指明源文件路径、并进行文件匹配（style: 'compressed' 表示输出格式）</span>
          .<span class="pl-en">on</span>(<span class="pl-s"><span class="pl-pds">'</span>error<span class="pl-pds">'</span></span>, <span class="pl-k">function</span> (<span class="pl-smi">err</span>) {
               <span class="pl-en">console</span>.<span class="pl-c1">error</span>(<span class="pl-s"><span class="pl-pds">'</span>Error!<span class="pl-pds">'</span></span>, <span class="pl-smi">err</span>.<span class="pl-smi">message</span>); <span class="pl-c">// 显示错误信息</span>
          })
          .<span class="pl-en">pipe</span>(<span class="pl-smi">gulp</span>.<span class="pl-en">dest</span>(<span class="pl-s"><span class="pl-pds">'</span>dist/css<span class="pl-pds">'</span></span>)); <span class="pl-c">// 输出路径</span>
});</pre>
</div>
<p>执行命令： <code>gulp sass</code></p>
<p>插件提供4种输出格式： nested：嵌套缩进的css代码，它是默认值。 expanded：没有缩进的、扩展的css代码。 compact：简洁格式的css代码。 compressed：压缩后的css代码。</p>
<blockquote><p>注： 使用前清看清 gulp-ruby-sass 写法，不要直接拿 gulp-sass 的写法来套用，两者并不完全相同。</p></blockquote>
<h4><a id="user-content-23-脚本压缩重命名javascript-task" class="anchor" href="https://github.com/zhonglimh/Gulp/blob/master/Example2/README.md#23-脚本压缩重命名javascript-task"></a>2.3 脚本压缩&amp;重命名（Javascript Task）</h4>
<h5><a id="user-content-js文件压缩gulp-uglify" class="anchor" href="https://github.com/zhonglimh/Gulp/blob/master/Example2/README.md#js文件压缩gulp-uglify"></a>JS文件压缩(<a href="https://www.npmjs.com/package/gulp-uglify">gulp-uglify</a>)：</h5>
<p>使用uglify引擎压缩JS文件。</p>
<p>安装命令： <code>npm install gulp-uglify --save-dev</code></p>
<p>基础配置：</p>
<div class="highlight highlight-source-js">
<pre><span class="pl-k">var</span> gulp <span class="pl-k">=</span> <span class="pl-c1">require</span>(<span class="pl-s"><span class="pl-pds">'</span>gulp<span class="pl-pds">'</span></span>); <span class="pl-c">// 基础库</span>
<span class="pl-k">var</span> uglify <span class="pl-k">=</span> <span class="pl-c1">require</span>(<span class="pl-s"><span class="pl-pds">'</span>gulp-uglify<span class="pl-pds">'</span></span>); <span class="pl-c">// js压缩</span>

<span class="pl-smi">gulp</span>.<span class="pl-en">task</span>(<span class="pl-s"><span class="pl-pds">'</span>script<span class="pl-pds">'</span></span>, <span class="pl-k">function</span>() {
  <span class="pl-k">return</span> <span class="pl-smi">gulp</span>.<span class="pl-en">src</span>(<span class="pl-s"><span class="pl-pds">'</span>src/js/*.js<span class="pl-pds">'</span></span>) <span class="pl-c">// 指明源文件路径、并进行文件匹配</span>
    .<span class="pl-en">pipe</span>(<span class="pl-en">uglify</span>({ preserveComments<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">'</span>some<span class="pl-pds">'</span></span> })) <span class="pl-c">// 使用uglify进行压缩，并保留部分注释</span>
    .<span class="pl-en">pipe</span>(<span class="pl-smi">gulp</span>.<span class="pl-en">dest</span>(<span class="pl-s"><span class="pl-pds">'</span>dist/js<span class="pl-pds">'</span></span>)); <span class="pl-c">// 输出路径</span>
});</pre>
</div>
<p>执行命令： <code>gulp script</code></p>
<h4><a id="user-content-24-图片处理image-task" class="anchor" href="https://github.com/zhonglimh/Gulp/blob/master/Example2/README.md#24-图片处理image-task"></a>2.4 图片处理（Image Task）</h4>
<h5><a id="user-content-图片压缩gulp-imagemin--深度压缩imagemin-pngquant" class="anchor" href="https://github.com/zhonglimh/Gulp/blob/master/Example2/README.md#图片压缩gulp-imagemin--深度压缩imagemin-pngquant"></a>图片压缩(<a href="https://www.npmjs.com/package/gulp-imagemin">gulp-imagemin</a>) + 深度压缩(<a href="https://www.npmjs.com/package/imagemin-pngquant">imagemin-pngquant</a>)：</h5>
<p>压缩PNG、JPEG、GIF和SVG图像。 gulp-imagemin集成了<a href="https://github.com/kevva/imagemin-gifsicle">gifsicle</a> 、<a href="https://github.com/kevva/imagemin-jpegtran">jpegtran</a> 、<a href="https://github.com/kevva/imagemin-opt.png" class="highslide-image" onclick="return hs.expand(this);">optipng</a> 、<a href="https://github.com/kevva/imagemin-svgo">svgo</a> 这4个插件。而imagemin-pngquant是imagemin插件的一个扩展插件，用于深度压缩图片。</p>
<p>安装命令： <code>npm install gulp-imagemin imagemin-pngquant --save-dev</code></p>
<p>基础配置：</p>
<div class="highlight highlight-source-js">
<pre><span class="pl-k">var</span> gulp <span class="pl-k">=</span> <span class="pl-c1">require</span>(<span class="pl-s"><span class="pl-pds">'</span>gulp<span class="pl-pds">'</span></span>); <span class="pl-c">// 基础库</span>
<span class="pl-k">var</span> imagemin <span class="pl-k">=</span> <span class="pl-c1">require</span>(<span class="pl-s"><span class="pl-pds">'</span>gulp-imagemin<span class="pl-pds">'</span></span>), <span class="pl-c">// 图片压缩</span>
  pngquant <span class="pl-k">=</span> <span class="pl-c1">require</span>(<span class="pl-s"><span class="pl-pds">'</span>imagemin-pngquant<span class="pl-pds">'</span></span>); <span class="pl-c">// 深度压缩</span>

<span class="pl-smi">gulp</span>.<span class="pl-en">task</span>(<span class="pl-s"><span class="pl-pds">'</span>images<span class="pl-pds">'</span></span>, <span class="pl-k">function</span>(){
  <span class="pl-k">return</span> <span class="pl-smi">gulp</span>.<span class="pl-en">src</span>(<span class="pl-s"><span class="pl-pds">'</span>src/images/**/*.{png,jpg,gif,svg}<span class="pl-pds">'</span></span>) <span class="pl-c">// 指明源文件路径、并进行文件匹配</span>
    .<span class="pl-en">pipe</span>(<span class="pl-en">imagemin</span>({
      progressive<span class="pl-k">:</span> <span class="pl-c1">true</span>, <span class="pl-c">// 无损压缩JPG图片</span>
      svgoPlugins<span class="pl-k">:</span> [{removeViewBox<span class="pl-k">:</span> <span class="pl-c1">false</span>}], <span class="pl-c">// 不移除svg的viewbox属性</span>
      use<span class="pl-k">:</span> [<span class="pl-en">pngquant</span>()] <span class="pl-c">// 使用pngquant插件进行深度压缩</span>
    }))
    .<span class="pl-en">pipe</span>(<span class="pl-smi">gulp</span>.<span class="pl-en">dest</span>(<span class="pl-s"><span class="pl-pds">'</span>dist/images<span class="pl-pds">'</span></span>)); <span class="pl-c">// 输出路径</span>
});</pre>
</div>
<p>执行命令： <code>gulp images</code></p>
<blockquote><p>注： 所使用的图片压缩方法，都会对图像造成一定的损失，这个和压缩比率有一定的关系。通常所说的无损压缩，也只是控制在肉眼难以发现的范围内。换句话来说，在保存切图的同时，其实已经对图像造成了一定的损失，因为没什么人会选择100%最佳质量导出图片。两者是差不多的概念。</p></blockquote>
<h4><a id="user-content-25-自动刷新livereload-task" class="anchor" href="https://github.com/zhonglimh/Gulp/blob/master/Example2/README.md#25-自动刷新livereload-task"></a>2.5 自动刷新（LiveReload Task）</h4>
<h5><a id="user-content-网页自动刷新文件变动后即时刷新页面gulp-livereload--静态服务器gulp-webserver" class="anchor" href="https://github.com/zhonglimh/Gulp/blob/master/Example2/README.md#网页自动刷新文件变动后即时刷新页面gulp-livereload--静态服务器gulp-webserver"></a>网页自动刷新（文件变动后即时刷新页面）(<a href="https://www.npmjs.com/package/gulp-livereload">gulp-livereload</a>) + 静态服务器：(<a href="https://www.npmjs.com/package/gulp-webserver">gulp-webserver</a>)：</h5>
<p>安装命令： <code>npm install gulp-livereload gulp-webserver --save-dev</code></p>
<div class="highlight highlight-source-js">
<pre><span class="pl-k">var</span> gulp <span class="pl-k">=</span> <span class="pl-c1">require</span>(<span class="pl-s"><span class="pl-pds">'</span>gulp<span class="pl-pds">'</span></span>); <span class="pl-c">// 基础库</span>
<span class="pl-k">var</span> livereload <span class="pl-k">=</span> <span class="pl-c1">require</span>(<span class="pl-s"><span class="pl-pds">'</span>gulp-livereload<span class="pl-pds">'</span></span>), <span class="pl-c">// 网页自动刷新（文件变动后即时刷新页面）</span>
  webserver <span class="pl-k">=</span> <span class="pl-c1">require</span>(<span class="pl-s"><span class="pl-pds">'</span>gulp-webserver<span class="pl-pds">'</span></span>); <span class="pl-c">// 本地服务器</span>

<span class="pl-c">// 注册任务</span>
<span class="pl-smi">gulp</span>.<span class="pl-en">task</span>(<span class="pl-s"><span class="pl-pds">'</span>webserver<span class="pl-pds">'</span></span>, <span class="pl-k">function</span>() {
  <span class="pl-smi">gulp</span>.<span class="pl-en">src</span>( <span class="pl-s"><span class="pl-pds">'</span>.<span class="pl-pds">'</span></span> ) <span class="pl-c">// 服务器目录（.代表根目录）</span>
  .<span class="pl-en">pipe</span>(<span class="pl-en">webserver</span>({ <span class="pl-c">// 运行gulp-webserver</span>
    livereload<span class="pl-k">:</span> <span class="pl-c1">true</span>, <span class="pl-c">// 启用LiveReload</span>
    open<span class="pl-k">:</span> <span class="pl-c1">true</span> <span class="pl-c">// 服务器启动时自动打开网页</span>
  }));
});

<span class="pl-c">// 监听任务</span>
<span class="pl-smi">gulp</span>.<span class="pl-en">task</span>(<span class="pl-s"><span class="pl-pds">'</span>watch<span class="pl-pds">'</span></span>,<span class="pl-k">function</span>(){
  <span class="pl-c">// 监听 html</span>
  <span class="pl-smi">gulp</span>.<span class="pl-c1">watch</span>(<span class="pl-s"><span class="pl-pds">'</span>src/**/*.html<span class="pl-pds">'</span></span>, [<span class="pl-s"><span class="pl-pds">'</span>html<span class="pl-pds">'</span></span>])
  <span class="pl-c">// 监听 scss</span>
  <span class="pl-smi">gulp</span>.<span class="pl-c1">watch</span>(<span class="pl-s"><span class="pl-pds">'</span>src/scss/*.scss<span class="pl-pds">'</span></span>, [<span class="pl-s"><span class="pl-pds">'</span>css<span class="pl-pds">'</span></span>]);
  <span class="pl-c">// 监听 images</span>
  <span class="pl-smi">gulp</span>.<span class="pl-c1">watch</span>(<span class="pl-s"><span class="pl-pds">'</span>src/images/**/*.{png,jpg,gif,svg}<span class="pl-pds">'</span></span>, [<span class="pl-s"><span class="pl-pds">'</span>images<span class="pl-pds">'</span></span>]);
  <span class="pl-c">// 监听 js</span>
  <span class="pl-smi">gulp</span>.<span class="pl-c1">watch</span>(<span class="pl-s"><span class="pl-pds">'</span>src/js/*.js<span class="pl-pds">'</span></span>, [<span class="pl-s"><span class="pl-pds">'</span>script<span class="pl-pds">'</span></span>]);
});

<span class="pl-c">// 默认任务</span>
<span class="pl-smi">gulp</span>.<span class="pl-en">task</span>(<span class="pl-s"><span class="pl-pds">'</span>default<span class="pl-pds">'</span></span>,[<span class="pl-s"><span class="pl-pds">'</span>webserver<span class="pl-pds">'</span></span>,<span class="pl-s"><span class="pl-pds">'</span>watch<span class="pl-pds">'</span></span>]);</pre>
</div>
<p>执行命令： <code>gulp</code></p>
<h3><a id="user-content-3-扩展优化extend--optimize-task" class="anchor" href="https://github.com/zhonglimh/Gulp/blob/master/Example2/README.md#3-扩展优化extend--optimize-task"></a>3. 扩展优化（Extend &amp; Optimize Task）</h3>
<p>至此，<code>一套简单的前端自动化工作流/Gulp工作流便已经完成</code>。现在，开始优化并扩展这些插件，使的工作流更为"智能"。</p>
<h5><a id="user-content-31-文件重命名gulp-rename" class="anchor" href="https://github.com/zhonglimh/Gulp/blob/master/Example2/README.md#31-文件重命名gulp-rename"></a>3.1 文件重命名(<a href="https://www.npmjs.com/package/gulp-rename">gulp-rename</a>)：</h5>
<p>像jQuery一样，通常为了表示该文件是压缩版，会在文件名后加上 .min 后缀。</p>
<p>安装命令： <code>npm install gulp-rename --save-dev</code></p>
<p>基础配置：</p>
<div class="highlight highlight-source-js">
<pre><span class="pl-k">var</span> gulp <span class="pl-k">=</span> <span class="pl-c1">require</span>(<span class="pl-s"><span class="pl-pds">'</span>gulp<span class="pl-pds">'</span></span>); <span class="pl-c">// 基础库</span>
<span class="pl-k">var</span> uglify <span class="pl-k">=</span> <span class="pl-c1">require</span>(<span class="pl-s"><span class="pl-pds">'</span>gulp-uglify<span class="pl-pds">'</span></span>), <span class="pl-c">// js压缩</span>
  rename <span class="pl-k">=</span> <span class="pl-c1">require</span>(<span class="pl-s"><span class="pl-pds">'</span>gulp-rename<span class="pl-pds">'</span></span>); <span class="pl-c">// 文件重命名</span>

<span class="pl-smi">gulp</span>.<span class="pl-en">task</span>(<span class="pl-s"><span class="pl-pds">'</span>script<span class="pl-pds">'</span></span>, <span class="pl-k">function</span>() {
  <span class="pl-k">return</span> <span class="pl-smi">gulp</span>.<span class="pl-en">src</span>(<span class="pl-s"><span class="pl-pds">'</span>src/js/*.js<span class="pl-pds">'</span></span>) <span class="pl-c">// 指明源文件路径、并进行文件匹配</span>
    .<span class="pl-en">pipe</span>(<span class="pl-en">rename</span>({ suffix<span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">'</span>.min<span class="pl-pds">'</span></span> })) <span class="pl-c">// 重命名</span>
    .<span class="pl-en">pipe</span>(<span class="pl-en">uglify</span>({ preserveComments<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">'</span>some<span class="pl-pds">'</span></span> })) <span class="pl-c">// 使用uglify进行压缩，并保留部分注释</span>
    .<span class="pl-en">pipe</span>(<span class="pl-smi">gulp</span>.<span class="pl-en">dest</span>(<span class="pl-s"><span class="pl-pds">'</span>dist/js<span class="pl-pds">'</span></span>)); <span class="pl-c">// 输出路径</span>
});</pre>
</div>
<p>执行命令： <code>gulp script</code></p>
<h5><a id="user-content-32-来源地图gulp-sourcemaps" class="anchor" href="https://github.com/zhonglimh/Gulp/blob/master/Example2/README.md#32-来源地图gulp-sourcemaps"></a>3.2 来源地图(<a href="https://www.npmjs.com/package/gulp-sourcemaps">gulp-sourcemaps</a>)：</h5>
<p>这是个非常有用的插件，在压缩、合并等操作之后，调试时所看到的内容，都是编译后的代码。这样就导致一个问题，调试过程中无法和源码（编译时的代码）位置相对应，让调试变的十分困难。 例如：一个jQuery，源码接近1万行。但压缩后只有短短的3~4行，并且变量名称也已发生改变。此时一旦报错，很难从错误信息中直接找到对应代码的原始位置。同样，CSS也会遇到类似问题。 而sourcemaps作用，便是成一个<code>.map</code>文件，里面储存着对应的源码位置。并内嵌在转换后的文件底部<code>/*# sourceMappingURL=maps/filename.css.map */</code>。这样在调试时，就会直接显示（映射）源码，而不时编译后的代码。</p>
<p>安装命令： <code>npm install gulp-sourcemaps --save-dev</code></p>
<p>基础配置：</p>
<div class="highlight highlight-source-js">
<pre><span class="pl-k">var</span> gulp <span class="pl-k">=</span> <span class="pl-c1">require</span>(<span class="pl-s"><span class="pl-pds">'</span>gulp<span class="pl-pds">'</span></span>); <span class="pl-c">// 基础库</span>
<span class="pl-k">var</span> uglify <span class="pl-k">=</span> <span class="pl-c1">require</span>(<span class="pl-s"><span class="pl-pds">'</span>gulp-uglify<span class="pl-pds">'</span></span>), <span class="pl-c">// js压缩</span>
  rename <span class="pl-k">=</span> <span class="pl-c1">require</span>(<span class="pl-s"><span class="pl-pds">'</span>gulp-rename<span class="pl-pds">'</span></span>), <span class="pl-c">// 文件重命名</span>
  sourcemaps <span class="pl-k">=</span> <span class="pl-c1">require</span>(<span class="pl-s"><span class="pl-pds">'</span>gulp-sourcemaps<span class="pl-pds">'</span></span>); <span class="pl-c">// 来源地图</span>

<span class="pl-smi">gulp</span>.<span class="pl-en">task</span>(<span class="pl-s"><span class="pl-pds">'</span>script<span class="pl-pds">'</span></span>, <span class="pl-k">function</span>() {
  <span class="pl-k">return</span> <span class="pl-smi">gulp</span>.<span class="pl-en">src</span>([<span class="pl-s"><span class="pl-pds">'</span>src/js/*.js<span class="pl-pds">'</span></span>,<span class="pl-s"><span class="pl-pds">'</span>!*.min.js<span class="pl-pds">'</span></span>]) <span class="pl-c">// 指明源文件路径、并进行文件匹配，排除 .min.js 后缀的文件</span>
    .<span class="pl-en">pipe</span>(<span class="pl-smi">sourcemaps</span>.<span class="pl-en">init</span>()) <span class="pl-c">// 执行sourcemaps</span>
    .<span class="pl-en">pipe</span>(<span class="pl-en">rename</span>({ suffix<span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">'</span>.min<span class="pl-pds">'</span></span> })) <span class="pl-c">// 重命名</span>
    .<span class="pl-en">pipe</span>(<span class="pl-en">uglify</span>({ preserveComments<span class="pl-k">:</span><span class="pl-s"><span class="pl-pds">'</span>some<span class="pl-pds">'</span></span> })) <span class="pl-c">// 使用uglify进行压缩，并保留部分注释</span>
    .<span class="pl-en">pipe</span>(<span class="pl-smi">sourcemaps</span>.<span class="pl-c1">write</span>(<span class="pl-s"><span class="pl-pds">'</span>maps<span class="pl-pds">'</span></span>)) <span class="pl-c">// 地图输出路径（存放位置）</span>
    .<span class="pl-en">pipe</span>(<span class="pl-smi">gulp</span>.<span class="pl-en">dest</span>(<span class="pl-s"><span class="pl-pds">'</span>dist/js<span class="pl-pds">'</span></span>)); <span class="pl-c">// 输出路径</span>
});</pre>
</div>
<p>执行命令： <code>gulp script</code></p>
<h5><a id="user-content-33-只操作有过修改的文件gulp-changed" class="anchor" href="https://github.com/zhonglimh/Gulp/blob/master/Example2/README.md#33-只操作有过修改的文件gulp-changed"></a>3.3 只操作有过修改的文件(<a href="https://www.npmjs.com/package/gulp-changed">gulp-changed</a>)：</h5>
<p>比如有20个文件，修改其中1个文件时，由于任务的局限性，也会把其余19匹配的无辜的同类给一并进行处理，这样就大大降低了效率。而 <code>gulp-changed</code> 插件，会首先把文件进行比对，如果文件没有改动，则跳过后续任务。</p>
<p>安装命令： <code>npm install gulp-changed --save-dev</code></p>
<p>基础配置：</p>
<div class="highlight highlight-source-js">
<pre><span class="pl-k">var</span> gulp <span class="pl-k">=</span> <span class="pl-c1">require</span>(<span class="pl-s"><span class="pl-pds">'</span>gulp<span class="pl-pds">'</span></span>); <span class="pl-c">// 基础库</span>
<span class="pl-k">var</span> imagemin <span class="pl-k">=</span> <span class="pl-c1">require</span>(<span class="pl-s"><span class="pl-pds">'</span>gulp-imagemin<span class="pl-pds">'</span></span>), <span class="pl-c">// 图片压缩</span>
  pngquant <span class="pl-k">=</span> <span class="pl-c1">require</span>(<span class="pl-s"><span class="pl-pds">'</span>imagemin-pngquant<span class="pl-pds">'</span></span>), <span class="pl-c">// 深度压缩</span>
  changed <span class="pl-k">=</span> <span class="pl-c1">require</span>(<span class="pl-s"><span class="pl-pds">'</span>gulp-changed<span class="pl-pds">'</span></span>); <span class="pl-c">// 只操作有过修改的文件</span>

<span class="pl-smi">gulp</span>.<span class="pl-en">task</span>(<span class="pl-s"><span class="pl-pds">'</span>images<span class="pl-pds">'</span></span>, <span class="pl-k">function</span>(){
  <span class="pl-k">return</span> <span class="pl-smi">gulp</span>.<span class="pl-en">src</span>(<span class="pl-s"><span class="pl-pds">'</span>src/images/**/*.{png,jpg,gif,svg}<span class="pl-pds">'</span></span>) <span class="pl-c">// 指明源文件路径、并进行文件匹配</span>
    .<span class="pl-en">pipe</span>(<span class="pl-en">changed</span>(<span class="pl-s"><span class="pl-pds">'</span>dist/images<span class="pl-pds">'</span></span>)) <span class="pl-c">// 对比文件是否有过改动（此处填写的路径和输出路径保持一致）</span>
    .<span class="pl-en">pipe</span>(<span class="pl-en">imagemin</span>({
      progressive<span class="pl-k">:</span> <span class="pl-c1">true</span>, <span class="pl-c">// 无损压缩JPG图片</span>
      svgoPlugins<span class="pl-k">:</span> [{removeViewBox<span class="pl-k">:</span> <span class="pl-c1">false</span>}], <span class="pl-c">// 不移除svg的viewbox属性</span>
      use<span class="pl-k">:</span> [<span class="pl-en">pngquant</span>()] <span class="pl-c">// 使用pngquant插件进行深度压缩</span>
    }))
    .<span class="pl-en">pipe</span>(<span class="pl-smi">gulp</span>.<span class="pl-en">dest</span>(<span class="pl-s"><span class="pl-pds">'</span>dist/images<span class="pl-pds">'</span></span>)); <span class="pl-c">// 输出路径</span>
});</pre>
</div>
<p>执行命令： <code>gulp images</code></p>
<p>再去 <code>dist/images</code> 文件夹，查看每个图片的最后修改日期，就会发现只针对刚才修改过的图片（文件）行了处理，而那些之前已经处理过的图片则没有再进行操作。</p>
<blockquote><p>注： 无论是 gulp-changed 还是下文中提到的 gulp-cache ，对 sass 文件无效，始终会对所有匹配文件进行操作。</p></blockquote>
<h5><a id="user-content-34-文件合并gulp-concat" class="anchor" href="https://github.com/zhonglimh/Gulp/blob/master/Example2/README.md#34-文件合并gulp-concat"></a>3.4 文件合并(<a href="https://www.npmjs.com/package/gulp-concat">gulp-concat</a>)：</h5>
<p>比如有多个JS库，jquery.min.js、bootstrap.min.js、angular.min.js。此时可以通过合并，减少网络请求。</p>
<p>安装命令： <code>npm install gulp-concat --save-dev</code></p>
<p>基础配置：</p>
<div class="highlight highlight-source-js">
<pre><span class="pl-k">var</span> gulp <span class="pl-k">=</span> <span class="pl-c1">require</span>(<span class="pl-s"><span class="pl-pds">'</span>gulp<span class="pl-pds">'</span></span>); <span class="pl-c">// 基础库</span>
<span class="pl-k">var</span> concat <span class="pl-k">=</span> <span class="pl-c1">require</span>(<span class="pl-s"><span class="pl-pds">"</span>gulp-concat<span class="pl-pds">"</span></span>); <span class="pl-c">// 文件合并</span>

<span class="pl-smi">gulp</span>.<span class="pl-en">task</span>(<span class="pl-s"><span class="pl-pds">'</span>concat<span class="pl-pds">'</span></span>, <span class="pl-k">function</span> () {
    <span class="pl-smi">gulp</span>.<span class="pl-en">src</span>(<span class="pl-s"><span class="pl-pds">'</span>js/*.min.js<span class="pl-pds">'</span></span>)  <span class="pl-c">// 要合并的文件</span>
    .<span class="pl-en">pipe</span>(<span class="pl-en">concat</span>(<span class="pl-s"><span class="pl-pds">'</span>libs.js<span class="pl-pds">'</span></span>))  <span class="pl-c">// 合并成libs.js</span>
    .<span class="pl-en">pipe</span>(<span class="pl-smi">gulp</span>.<span class="pl-en">dest</span>(<span class="pl-s"><span class="pl-pds">'</span>dist/js<span class="pl-pds">'</span></span>));
});</pre>
</div>
<p>执行命令： <code>gulp concat</code></p>
<h5><a id="user-content-35-文件清理gulp-clean" class="anchor" href="https://github.com/zhonglimh/Gulp/blob/master/Example2/README.md#35-文件清理gulp-clean"></a>3.5 文件清理(<a href="https://www.npmjs.com/package/gulp-clean">gulp-clean</a>)：</h5>
<p>简单的说，就是一键删除（清理）文件。就拿为了调试所生成的 .map 文件为例，在正式发布时并不需要，此时就能通过 clean任务进行清理。</p>
<p>安装命令： <code>npm install gulp-clean --save-dev</code></p>
<p>基础配置：</p>
<div class="highlight highlight-source-js">
<pre><span class="pl-k">var</span> gulp <span class="pl-k">=</span> <span class="pl-c1">require</span>(<span class="pl-s"><span class="pl-pds">'</span>gulp<span class="pl-pds">'</span></span>); <span class="pl-c">// 基础库</span>
<span class="pl-k">var</span> clean <span class="pl-k">=</span> <span class="pl-c1">require</span>(<span class="pl-s"><span class="pl-pds">'</span>gulp-clean<span class="pl-pds">'</span></span>); <span class="pl-c">// 文件清理</span>

<span class="pl-smi">gulp</span>.<span class="pl-en">task</span>(<span class="pl-s"><span class="pl-pds">'</span>clean<span class="pl-pds">'</span></span>, <span class="pl-k">function</span>() {
  <span class="pl-k">return</span> <span class="pl-smi">gulp</span>.<span class="pl-en">src</span>([<span class="pl-s"><span class="pl-pds">'</span>dist/css/maps<span class="pl-pds">'</span></span>,<span class="pl-s"><span class="pl-pds">'</span>dist/js/maps<span class="pl-pds">'</span></span>], {read<span class="pl-k">:</span> <span class="pl-c1">false</span>})
    .<span class="pl-en">pipe</span>(<span class="pl-en">clean</span>());
});</pre>
</div>
<p>执行命令： <code>gulp clean</code></p>
<h3><a id="user-content-4-其他插件介绍other-plug-ins" class="anchor" href="https://github.com/zhonglimh/Gulp/blob/master/Example2/README.md#4-其他插件介绍other-plug-ins"></a>4. 其他插件介绍（Other plug-ins）</h3>
<p>这部分插件作为扩展阅读，只做简单介绍。每个插件都有每个插件的特性，根据你的喜好和实际操作环境而定，萝卜青菜各有所爱。用的人最多的，不代表就是适合的。总之，有时间有精力的，可以多试试，多玩玩，多配配，这里也只是冰山一角。</p>
<h4><a id="user-content-41-css类" class="anchor" href="https://github.com/zhonglimh/Gulp/blob/master/Example2/README.md#41-css类"></a>4.1 CSS类</h4>
<h5><a id="user-content-1-css压缩-gulp-minify-css" class="anchor" href="https://github.com/zhonglimh/Gulp/blob/master/Example2/README.md#1-css压缩-gulp-minify-css"></a>1. CSS压缩 (<a href="https://www.npmjs.com/package/gulp-minify-css">gulp-minify-css</a>)</h5>
<p>安装命令： <code>npm install gulp-minify-css --save-dev</code></p>
<p>基础配置：</p>
<div class="highlight highlight-source-js">
<pre><span class="pl-k">var</span> gulp <span class="pl-k">=</span> <span class="pl-c1">require</span>(<span class="pl-s"><span class="pl-pds">'</span>gulp<span class="pl-pds">'</span></span>); <span class="pl-c">// 基础库</span>
<span class="pl-k">var</span> minifyCss <span class="pl-k">=</span> <span class="pl-c1">require</span>(<span class="pl-s"><span class="pl-pds">'</span>gulp-minify-css<span class="pl-pds">'</span></span>); <span class="pl-c">// CSS压缩</span>

<span class="pl-smi">gulp</span>.<span class="pl-en">task</span>(<span class="pl-s"><span class="pl-pds">'</span>minify-css<span class="pl-pds">'</span></span>, <span class="pl-k">function</span>() {
  <span class="pl-k">return</span> <span class="pl-smi">gulp</span>.<span class="pl-en">src</span>(<span class="pl-s"><span class="pl-pds">'</span>css/*.css<span class="pl-pds">'</span></span>)
    .<span class="pl-en">pipe</span>(<span class="pl-smi">gulp</span>.<span class="pl-en">dest</span>(<span class="pl-s"><span class="pl-pds">'</span>dist<span class="pl-pds">'</span></span>));
});</pre>
</div>
<p>执行命令： <code>gulp minify-css</code></p>
<h5><a id="user-content-2-css预处理less编译-gulp-less" class="anchor" href="https://github.com/zhonglimh/Gulp/blob/master/Example2/README.md#2-css预处理less编译-gulp-less"></a>2. CSS预处理/Less编译 (<a href="https://www.npmjs.com/package/gulp-less">gulp-less</a>)</h5>
<p>安装命令： <code>npm install gulp-autoprefixer --save-dev</code></p>
<p>基础配置：</p>
<div class="highlight highlight-source-js">
<pre><span class="pl-k">var</span> gulp <span class="pl-k">=</span> <span class="pl-c1">require</span>(<span class="pl-s"><span class="pl-pds">'</span>gulp<span class="pl-pds">'</span></span>); <span class="pl-c">// 基础库</span>
<span class="pl-k">var</span> less <span class="pl-k">=</span> <span class="pl-c1">require</span>(<span class="pl-s"><span class="pl-pds">'</span>gulp-less<span class="pl-pds">'</span></span>); <span class="pl-c">// LESS编译</span>

<span class="pl-smi">gulp</span>.<span class="pl-en">task</span>(<span class="pl-s"><span class="pl-pds">'</span>less<span class="pl-pds">'</span></span>, <span class="pl-k">function</span> () {
    <span class="pl-smi">gulp</span>.<span class="pl-en">src</span>(<span class="pl-s"><span class="pl-pds">'</span>src/less/*.less<span class="pl-pds">'</span></span>)
        .<span class="pl-en">pipe</span>(<span class="pl-en">less</span>())
        .<span class="pl-en">pipe</span>(<span class="pl-smi">gulp</span>.<span class="pl-en">dest</span>(<span class="pl-s"><span class="pl-pds">'</span>src/css<span class="pl-pds">'</span></span>));
});</pre>
</div>
<p>执行命令： <code>gulp less</code></p>
<h5><a id="user-content-3-自动添加css3浏览器前缀gulp-autoprefixer" class="anchor" href="https://github.com/zhonglimh/Gulp/blob/master/Example2/README.md#3-自动添加css3浏览器前缀gulp-autoprefixer"></a>3. 自动添加CSS3浏览器前缀(<a href="https://www.npmjs.com/package/gulp-autoprefixer">gulp-autoprefixer</a>):</h5>
<p><a href="http://leaverou.github.io/prefixfree/">-prefix-free</a> 会自动为CSS添加上浏览器的前缀，摆脱前缀痛苦。而 <code>gulp-autoprefixer</code> 插件同样如此。</p>
<p>安装命令： <code>npm install gulp-autoprefixer --save-dev</code></p>
<p>基础配置：</p>
<div class="highlight highlight-source-js">
<pre><span class="pl-k">var</span> gulp <span class="pl-k">=</span> <span class="pl-c1">require</span>(<span class="pl-s"><span class="pl-pds">'</span>gulp<span class="pl-pds">'</span></span>); <span class="pl-c">// 基础库</span>
<span class="pl-k">var</span> autoprefixer <span class="pl-k">=</span> <span class="pl-c1">require</span>(<span class="pl-s"><span class="pl-pds">'</span>gulp-autoprefixer<span class="pl-pds">'</span></span>); <span class="pl-c">// 自动添加CSS3浏览器前缀</span>

<span class="pl-smi">gulp</span>.<span class="pl-en">task</span>(<span class="pl-s"><span class="pl-pds">'</span>prefix<span class="pl-pds">'</span></span>, <span class="pl-k">function</span> () {
    <span class="pl-smi">gulp</span>.<span class="pl-en">src</span>(<span class="pl-s"><span class="pl-pds">'</span>src/css/*.less<span class="pl-pds">'</span></span>)
        .<span class="pl-en">pipe</span>(<span class="pl-en">less</span>())
        .<span class="pl-en">pipe</span>(<span class="pl-smi">gulp</span>.<span class="pl-en">dest</span>(<span class="pl-s"><span class="pl-pds">'</span>src/css<span class="pl-pds">'</span></span>));
});

<span class="pl-k">var</span> gulp <span class="pl-k">=</span> <span class="pl-c1">require</span>(<span class="pl-s"><span class="pl-pds">'</span>gulp<span class="pl-pds">'</span></span>); <span class="pl-c">// 基础库</span>
<span class="pl-k">var</span> sass <span class="pl-k">=</span> <span class="pl-c1">require</span>(<span class="pl-s"><span class="pl-pds">'</span>gulp-ruby-sass<span class="pl-pds">'</span></span>), <span class="pl-c">// sass/scss编译</span>
  autoprefixer <span class="pl-k">=</span> <span class="pl-c1">require</span>(<span class="pl-s"><span class="pl-pds">'</span>gulp-autoprefixer<span class="pl-pds">'</span></span>); <span class="pl-c">// 自动添加CSS3浏览器前缀</span>

<span class="pl-smi">gulp</span>.<span class="pl-en">task</span>(<span class="pl-s"><span class="pl-pds">'</span>sass<span class="pl-pds">'</span></span>, <span class="pl-k">function</span> () {
  <span class="pl-k">return</span> <span class="pl-en">sass</span>(<span class="pl-s"><span class="pl-pds">'</span>src/css<span class="pl-pds">'</span></span>, { style<span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">'</span>compressed<span class="pl-pds">'</span></span> }) <span class="pl-c">// 指明源文件路径、并进行文件匹配</span>
    .<span class="pl-en">on</span>(<span class="pl-s"><span class="pl-pds">'</span>error<span class="pl-pds">'</span></span>, <span class="pl-k">function</span> (<span class="pl-smi">err</span>) {
      <span class="pl-en">console</span>.<span class="pl-c1">error</span>(<span class="pl-s"><span class="pl-pds">'</span>Error!<span class="pl-pds">'</span></span>, <span class="pl-smi">err</span>.<span class="pl-smi">message</span>); <span class="pl-c">// 显示错误信息</span>
    })
    .<span class="pl-en">pipe</span>(<span class="pl-en">autoprefixer</span>({
      browsers<span class="pl-k">:</span> [<span class="pl-s"><span class="pl-pds">'</span>last 2 versions<span class="pl-pds">'</span></span>], <span class="pl-c">// 主流浏览器的最新两个版本</span>
      cascade<span class="pl-k">:</span> <span class="pl-c1">false</span> <span class="pl-c">// 是否美化属性值</span>
    }))
    .<span class="pl-en">pipe</span>(<span class="pl-smi">gulp</span>.<span class="pl-en">dest</span>(<span class="pl-s"><span class="pl-pds">'</span>dist/css<span class="pl-pds">'</span></span>)); <span class="pl-c">// 输出路径</span>
});</pre>
</div>
<p>执行命令： <code>gulp sass</code></p>
<h4><a id="user-content-42-图像类" class="anchor" href="https://github.com/zhonglimh/Gulp/blob/master/Example2/README.md#42-图像类"></a>4.2 图像类</h4>
<h5><a id="user-content-1-使用tinypn-api压缩图片gulp-tinypng" class="anchor" href="https://github.com/zhonglimh/Gulp/blob/master/Example2/README.md#1-使用tinypn-api压缩图片gulp-tin.png" class="highslide-image" onclick="return hs.expand(this);"></a>1. 使用TinyPN API压缩图片(<a href="https://www.npmjs.com/package/gulp-tin.png" class="highslide-image" onclick="return hs.expand(this);">gulp-tinypng</a>)：</h5>
<p>gulp-tinypng压缩后的图片大小，相当于使用imagemin-pngquant深度压缩后的大小。使用时需先注册TinyPNG账户，获你的API KEY。免费版每个月可以压缩500张图片，对于一般项目而言已经足够。</p>
<p>安装命令： <code>npm install gulp-tinypng --save-dev</code></p>
<p>基础配置：</p>
<div class="highlight highlight-source-js">
<pre><span class="pl-k">var</span> gulp <span class="pl-k">=</span> <span class="pl-c1">require</span>(<span class="pl-s"><span class="pl-pds">'</span>gulp<span class="pl-pds">'</span></span>); <span class="pl-c">// 基础库</span>
<span class="pl-k">var</span> tinypng <span class="pl-k">=</span> <span class="pl-c1">require</span>(<span class="pl-s"><span class="pl-pds">'</span>gulp-tinypng<span class="pl-pds">'</span></span>); <span class="pl-c">// 使用TinyPN API压缩图片</span>

<span class="pl-smi">gulp</span>.<span class="pl-en">task</span>(<span class="pl-s"><span class="pl-pds">'</span>tinypng<span class="pl-pds">'</span></span>, <span class="pl-k">function</span>(){
    <span class="pl-k">return</span> <span class="pl-smi">gulp</span>.<span class="pl-en">src</span>(<span class="pl-s"><span class="pl-pds">'</span>src/images/**/*<span class="pl-pds">'</span></span>) <span class="pl-c">// 源地址</span>
     .<span class="pl-en">pipe</span>(<span class="pl-en">tinypng</span>(<span class="pl-s"><span class="pl-pds">'</span>填写TinyPN API KEY<span class="pl-pds">'</span></span>))
    .<span class="pl-en">pipe</span>(<span class="pl-smi">gulp</span>.<span class="pl-en">dest</span>(<span class="pl-s"><span class="pl-pds">'</span>dist/images<span class="pl-pds">'</span></span>)); <span class="pl-c">// 输出路径</span>
});</pre>
</div>
<p>执行命令： <code>gulp tinypng</code></p>
<h4><a id="user-content-43-其他" class="anchor" href="https://github.com/zhonglimh/Gulp/blob/master/Example2/README.md#43-其他"></a>4.3 其他</h4>
<h5><a id="user-content-1-缓存代理gulp-cache" class="anchor" href="https://github.com/zhonglimh/Gulp/blob/master/Example2/README.md#1-缓存代理gulp-cache"></a>1. 缓存代理(<a href="https://www.npmjs.com/package/gulp-cache">gulp-cache</a>)：</h5>
<p>缓存操作过的文件，当文件修改时，只编译当前修改的文件。其余文件直接从缓存中调取，提高效率。 缺点：因为是缓存，所以如果文件被删除，但没及时清理缓存文件时，就会导致被删除的文件又从缓存中读取了出来，所谓成也萧何败也萧何。</p>
<p>安装命令： <code>npm install gulp-cache --save-dev</code></p>
<p>基础配置：</p>
<div class="highlight highlight-source-js">
<pre><span class="pl-k">var</span> gulp <span class="pl-k">=</span> <span class="pl-c1">require</span>(<span class="pl-s"><span class="pl-pds">'</span>gulp<span class="pl-pds">'</span></span>); <span class="pl-c">// 基础库</span>
<span class="pl-k">var</span> imagemin <span class="pl-k">=</span> <span class="pl-c1">require</span>(<span class="pl-s"><span class="pl-pds">'</span>gulp-imagemin<span class="pl-pds">'</span></span>), <span class="pl-c">// 图片压缩</span>
  pngquant <span class="pl-k">=</span> <span class="pl-c1">require</span>(<span class="pl-s"><span class="pl-pds">'</span>imagemin-pngquant<span class="pl-pds">'</span></span>), <span class="pl-c">// 深度压缩</span>
  pngquant <span class="pl-k">=</span> <span class="pl-c1">require</span>(<span class="pl-s"><span class="pl-pds">'</span>imagemin-cache<span class="pl-pds">'</span></span>), <span class="pl-c">// 缓存代理</span>
  clean <span class="pl-k">=</span> <span class="pl-c1">require</span>(<span class="pl-s"><span class="pl-pds">'</span>imagemin-clean<span class="pl-pds">'</span></span>); <span class="pl-c">// 文件清理</span>

<span class="pl-c">// imagemin 图片压缩（利用cache）</span>
<span class="pl-smi">gulp</span>.<span class="pl-en">task</span>(<span class="pl-s"><span class="pl-pds">'</span>images<span class="pl-pds">'</span></span>, <span class="pl-k">function</span>(){
  <span class="pl-k">return</span> <span class="pl-smi">gulp</span>.<span class="pl-en">src</span>(<span class="pl-s"><span class="pl-pds">'</span>src/images/**/*.{png,jpg,gif,svg}<span class="pl-pds">'</span></span>) <span class="pl-c">// 指明源文件路径、并进行文件匹配</span>
    .<span class="pl-en">pipe</span>(<span class="pl-en">cache</span>(<span class="pl-en">imagemin</span>({
      progressive<span class="pl-k">:</span> <span class="pl-c1">true</span>, <span class="pl-c">// 无损压缩JPG图片</span>
      svgoPlugins<span class="pl-k">:</span> [{removeViewBox<span class="pl-k">:</span> <span class="pl-c1">false</span>}], <span class="pl-c">// 不要移除svg的viewbox属性</span>
      use<span class="pl-k">:</span> [<span class="pl-en">pngquant</span>()] <span class="pl-c">// 使用pngquant插件进行深度压缩</span>
    })))
    .<span class="pl-en">pipe</span>(<span class="pl-smi">gulp</span>.<span class="pl-en">dest</span>(<span class="pl-s"><span class="pl-pds">'</span>dist/images<span class="pl-pds">'</span></span>)); <span class="pl-c">// 输出路径</span>
});
<span class="pl-c">// 清理缓存文件</span>
<span class="pl-smi">gulp</span>.<span class="pl-en">task</span>(<span class="pl-s"><span class="pl-pds">'</span>clean<span class="pl-pds">'</span></span>, <span class="pl-k">function</span> (<span class="pl-smi">done</span>) {
  <span class="pl-k">return</span> <span class="pl-smi">cache</span>.<span class="pl-en">clearAll</span>(done);
});</pre>
</div>
<h3><a id="user-content-5-匹配规则match-files" class="anchor" href="https://github.com/zhonglimh/Gulp/blob/master/Example2/README.md#5-匹配规则match-files"></a>5. 匹配规则（Match Files）</h3>
<p>Gulp使用 <a href="https://github.com/isaacs/node-glob">node-glob</a> 模块，借助 <a href="https://github.com/isaacs/minimatch">minimatch</a> 库，将glob表达式(glob expressions)转换成JavaScript正则表达式(JavaScript RegExp) ，从而实现文件匹配功能。所看到的<code>**</code>和<code>*</code>都是其所提供的语法：</p>
<p><code>*</code> 匹配文件路径中的0个或多个字符，但不会匹配路径分隔符，除非路径分隔符出现在末尾。 <code>**</code> 匹配路径中的0个或多个目录及其子目录，需要单独出现，即它左右不能有其他东西了。如果出现在末尾，也能匹配文件。 <code>?</code> 匹配文件路径中的一个字符(不会匹配路径分隔符)。 <code>[...]</code> 匹配方括号中出现的字符中的任意一个，当方括号中第一个字符为<code>^</code>或<code>!</code>时，则表示不匹配方括号中出现的其他字符中的任意一个。 <code>!(pattern|pattern|pattern)</code> 匹配任何与括号中给定的任一参数一致的都不匹配的。 <code>?(pattern|pattern|pattern)</code> 匹配括号中给定的任一参数0次或1次。 <code>+(pattern|pattern|pattern)</code> 匹配括号中给定的任一参数至少1次。 <code>*(a|b|c)</code> 匹配括号中给定的任一参数0次或多次。<code>@(pattern|pat*|pat?erN)</code> 匹配括号中给定的任一参数1次。</p>
<p>用实例来加深理解： <code>*</code> 能匹配 <code>a.js</code> , <code>x.y</code> , <code>abc , abc/</code>，但不能匹配 a/b.js <code>*.*</code> 能匹配 <code>a.js</code> ,<code>style.css</code> , <code>a.b</code> , <code>x.y</code> <code>*/*/*.js</code> 能匹配<code>a/b/c.js</code> , <code>x/y/z.js</code>，不能匹配 <code>a/b.js</code> ,<code>a/b/c/d.js</code> <code>**</code> 能匹配 <code>abc</code> , <code>a/b.js</code> ,<code>a/b/c.js</code> , <code>x/y/z</code> , <code>x/y/z/a.b</code>，能用来匹配所有的目录和文件 <code>**/*.js</code> 能匹配 <code>foo.js</code> , <code>a/foo.js</code>, <code>a/b/foo.js</code> , <code>a/b/c/foo.js</code> <code>a/**/z</code> 能匹配<code>a/z</code> , <code>a/b/z</code> , <code>a/b/c/z</code> , <code>a/d/g/h/j/k/z</code><code>a/**b/z</code> 能匹配 <code>a/b/z , a/sb/z</code>，但不能匹配<code>a/x/sb/z</code>，因为只有单<code>**</code>单独出现才能匹配多级目录 <code>?.js</code> 能匹配 <code>a.js</code> , <code>b.js</code> , <code>c.js</code> <code>a??</code> 能匹配<code>a.b</code> , <code>abc</code>，但不能匹配 <code>ab/</code>，因为它不会匹配路径分隔符 <code>[xyz].js</code> 只能匹配 <code>x.js</code> , <code>y.js</code> ,<code>z.js</code>，不会匹配 <code>xy.js</code> , <code>xyz.js</code> 等，整个中括号只代表一个字符 <code>[^xyz].js</code> 能匹配 <code>a.js</code> , <code>b.js</code> ,<code>c.js</code>等，不能匹配 <code>x.js</code> , <code>y.js</code> , <code>z.js</code></p>
<p>当有多种匹配模式时可以使用数组：</p>
<div class="highlight highlight-source-js">
<pre><span class="pl-c">// 使用数组的方式来匹配多种文件</span>
<span class="pl-smi">gulp</span>.<span class="pl-en">src</span>([<span class="pl-s"><span class="pl-pds">'</span>js/*.min.js<span class="pl-pds">'</span></span>,<span class="pl-s"><span class="pl-pds">'</span>css/*.min.css<span class="pl-pds">'</span></span>])</pre>
</div>
<p>使用数组的方式还有一个好处就是可以很方便的使用排除模式，在数组中的单个匹配模式前加上<code>!</code>即是排除模式，它会在匹配的结果中排除这个匹配，要注意一点的是不能在数组中的第一个元素中使用排除模式：</p>
<div class="highlight highlight-source-js">
<pre><span class="pl-c">// 使用数组的方式来匹配多种文件</span>
<span class="pl-smi">gulp</span>.<span class="pl-en">src</span>([<span class="pl-s"><span class="pl-pds">'</span>*.js<span class="pl-pds">'</span></span>,<span class="pl-s"><span class="pl-pds">'</span>!b*.js<span class="pl-pds">'</span></span>]) <span class="pl-c">// 匹配所有js文件，但排除掉以b开头的js文件</span>
<span class="pl-smi">gulp</span>.<span class="pl-en">src</span>([<span class="pl-s"><span class="pl-pds">'</span>!b*.js<span class="pl-pds">'</span></span>,<span class="pl-k">*</span>.<span class="pl-smi">js</span>]) <span class="pl-c">// 不会排除任何文件，因为排除模式不能出现在数组的第一个元素中</span></pre>
</div>
<p>此外，还可以使用展开模式。展开模式以花括号作为定界符，根据它里面的内容，会展开为多个模式，最后匹配的结果为所有展开的模式相加起来得到的结果。展开的例子如下： <code>a{b,c}d</code> 会展开为 <code>abd,acd</code><code>a{b,}c</code> 会展开为 <code>abc,ac</code> <code>a{0..3}d</code> 会展开为<code>a0d</code>,<code>a1d</code>,<code>a2d</code>,<code>a3d</code> <code>a{b,c{d,e}f}g</code> 会展开为<code>abg</code>,<code>acdfg</code>,<code>acefg</code> <code>a{b,c}d{e,f}g</code> 会展开为<code>abdeg</code>,<code>acdeg</code>,<code>abdeg</code>,<code>abdfg</code></p>
<h3><a id="user-content-6-注意事项attention" class="anchor" href="https://github.com/zhonglimh/Gulp/blob/master/Example2/README.md#6-注意事项attention"></a>6. 注意事项（Attention）</h3>
<ul>
<li>watch 的时候路径不要用 './path'，直接使用 '/path' 即可不然会导致新增文件无法被 watch。</li>
<li>gulp 对于 one after one 的任务链，需要加 return，比如 gulp clean</li>
</ul>
<p>参考资料： <a href="http://www.codeproject.com/Articles/865943/An-introduction-to-Gulp">An introduction to Gulp</a> <a href="http://www.cnblogs.com/2050/p/4198792.html#part3">gulp API 介绍</a></p>
<p>扩展资料： <a href="https://github.com/gulpjs/gulp/blob/master/docs/API.md">Gulp API docs</a> <a href="https://github.com/osscafe/gulp-cheatsheet">gulp-cheatsheet</a></p>
